FROM alpine:latest AS builder

ENV TZ=Europe/London
ARG TARGETARCH
ARG GO_VERSION="1.24.4"      
ARG GOOSE_VERSION="3.24.2"
ARG TEMPL_VERSION="0.3.865"
ARG GOLANGCI_LINT_VERSION="v1.64.8" 

# Install build dependencies
RUN apk update && apk add --no-cache \
    ca-certificates \
    git \
    make \
    pkgconf \
    wget \
    build-base \
    binutils

# Install Go
RUN if [ "$TARGETARCH" = "arm64" ]; then \
    GOARCH="arm64"; \
    elif [ "$TARGETARCH" = "amd64" ]; then \
    GOARCH="amd64"; \
    else \
    echo "Unsupported architecture: $TARGETARCH"; exit 1; \
    fi \
    && wget "https://go.dev/dl/go${GO_VERSION}.linux-${GOARCH}.tar.gz" -P /tmp/ \
    && tar -C /usr/local -xzf "/tmp/go${GO_VERSION}.linux-${GOARCH}.tar.gz" \
    && rm -f "/tmp/go${GO_VERSION}.linux-${GOARCH}.tar.gz"

ENV PATH="${PATH}:/usr/local/go/bin"

# Install Go tools with cleanup in same layer
RUN export CGO_ENABLED=0 \
    && go install github.com/pressly/goose/v3/cmd/goose@v${GOOSE_VERSION} \
    && go install github.com/a-h/templ/cmd/templ@v${TEMPL_VERSION} \
    && go install github.com/cosmtrek/air@v1.49.0 \
    && go install github.com/golangci/golangci-lint/cmd/golangci-lint@${GOLANGCI_LINT_VERSION} \
    && mv /root/go/bin/* /usr/local/bin/ \
    && rm -rf /root/go /root/.cache

# Download tailwindcss
RUN if [ "$TARGETARCH" = "amd64" ]; then \
    wget https://github.com/tailwindlabs/tailwindcss/releases/download/v3.4.1/tailwindcss-linux-x64 -O /usr/local/bin/tailwindcss; \
    elif [ "$TARGETARCH" = "arm64" ]; then \
    wget https://github.com/tailwindlabs/tailwindcss/releases/download/v3.4.1/tailwindcss-linux-arm64 -O /usr/local/bin/tailwindcss; \
    fi \
    && chmod +x /usr/local/bin/tailwindcss

WORKDIR /gocms

# Copy all source code and build the application.
# This runs `templ generate`, `tailwindcss`, and `go build`.
COPY . .
RUN make build

# Final stage - much smaller (multistage build)
FROM alpine:latest AS final

ENV TZ=Europe/London
ENV PATH="${PATH}:/usr/local/go/bin:/usr/local/bin"

# Install only runtime dependencies
RUN apk update && apk add --no-cache \
    ca-certificates tzdata && \
    rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy the main binary from the builder stage.
COPY --from=builder /gocms/tmp/gocms .

# Copy necessary assets.
# 'static' is copied from the builder because it's processed by tailwind.
# The 'views' directory is not needed because the templates are compiled into the binary.
COPY --from=builder /gocms/static ./static/
COPY gocms_config.toml images ./

# Command to run the main application with the config file.
CMD ["./gocms", "--config", "gocms_config.toml"]

LABEL maintainer="ricardobenthem@gmail.com"