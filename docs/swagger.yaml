definitions:
  admin_app.AddCardRequest:
    properties:
      data:
        description: |-
          Content data of the card
          in: body
        type: string
      image_location:
        description: |-
          Image location URL
          in: body
        type: string
      schema:
        description: |-
          Schema name
          in: body
        type: string
    type: object
  admin_app.AddCardSchemaRequest:
    properties:
      schema:
        description: |-
          JSON schema string
          in: body
          required: true
        type: string
      title:
        description: |-
          Title of the card schema
          in: body
          required: true
        type: string
    type: object
  admin_app.AddPageRequest:
    properties:
      content:
        description: |-
          Content of the page
          in: body
        type: string
      link:
        description: |-
          Link of the page
          in: body
        type: string
      title:
        description: |-
          Title of the page
          in: body
          required: true
        type: string
    type: object
  admin_app.AddPostRequest:
    properties:
      content:
        description: |-
          Content of the post
          in: body
        type: string
      excerpt:
        description: |-
          Excerpt of the post
          in: body
        type: string
      title:
        description: |-
          Title of the post
          in: body
          required: true
        type: string
    type: object
  admin_app.CardIdResponse:
    properties:
      id:
        description: ID of the card
        type: string
    type: object
  admin_app.ChangeCardRequest:
    properties:
      id:
        description: |-
          ID of the card
          in: body
        type: string
      image_location:
        description: |-
          Image location URL
          in: body
        type: string
      json_data:
        description: |-
          JSON data of the card
          in: body
        type: string
      json_schema:
        description: |-
          JSON schema name
          in: body
        type: string
    type: object
  admin_app.ChangePageRequest:
    properties:
      content:
        description: |-
          Content of the page
          in: body
        type: string
      id:
        description: |-
          ID of the page
          in: body
          required: true
        type: integer
      link:
        description: |-
          Link of the page
          in: body
        type: string
      title:
        description: |-
          Title of the page
          in: body
        type: string
    type: object
  admin_app.ChangePostRequest:
    properties:
      content:
        description: |-
          Content of the post
          in: body
        type: string
      excerpt:
        description: |-
          Excerpt of the post
          in: body
        type: string
      id:
        description: |-
          ID of the post
          in: body
          required: true
        type: integer
      title:
        description: |-
          Title of the post
          in: body
        type: string
    type: object
  admin_app.DeletePageRequest:
    properties:
      link:
        description: |-
          Link of the page to delete
          in: body
          required: true
        type: string
    type: object
  admin_app.DeletePostRequest:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  admin_app.DeleteSchemaBinding:
    properties:
      id:
        description: |-
          UUID of the schema to delete
          in: path
          required: true
        type: string
    required:
    - id
    type: object
  admin_app.GetCardRequest:
    properties:
      limit:
        description: |-
          Limit number of cards to return
          in: query
        type: integer
      page:
        description: |-
          Page number for pagination
          in: query
        type: integer
      schema:
        description: |-
          Schema name to filter cards
          in: path
          required: true
        type: string
    required:
    - schema
    type: object
  admin_app.GetPostResponse:
    properties:
      content:
        description: Content of the post
        type: string
      excerpt:
        description: Excerpt of the post
        type: string
      id:
        description: ID of the post
        type: integer
      title:
        description: Title of the post
        type: string
    type: object
  admin_app.GetPostsResponse:
    properties:
      posts:
        description: List of posts
        items:
          $ref: '#/definitions/common.Post'
        type: array
    type: object
  admin_app.GetSchemaasResponse:
    properties:
      schemas:
        description: List of card schemas
        items:
          $ref: '#/definitions/common.CardSchema'
        type: array
    type: object
  admin_app.ImageIdResponse:
    properties:
      id:
        description: ID of the image
        type: string
    type: object
  admin_app.PageResponse:
    properties:
      id:
        description: ID of the page
        type: integer
      link:
        description: Link of the page
        type: string
    type: object
  admin_app.PermalinkIdResponse:
    properties:
      post_id:
        description: ID of the post
        type: integer
    type: object
  admin_app.PostIdResponse:
    properties:
      id:
        description: ID of the post
        type: integer
    type: object
  auth.LoginInput:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  auth.RegisterInput:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  auth.RegisterResponse:
    properties:
      user_id:
        type: integer
    type: object
  auth.TokenResponse:
    properties:
      token:
        type: string
    type: object
  common.CardSchema:
    properties:
      cards:
        items:
          type: string
        type: array
      schema:
        type: string
      title:
        type: string
      uuid:
        type: string
    type: object
  common.ErrorResponse:
    properties:
      error:
        type: string
      msg:
        type: string
    type: object
  common.Post:
    properties:
      content:
        type: string
      excerpt:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  common.User:
    properties:
      password:
        type: string
      user_id:
        type: integer
      username:
        type: string
    type: object
info:
  contact:
    email: ricardobenthem@gmail.com
    name: Ricardo
  description: This is the admin API for the GoCMS app.
  license:
    name: MIT
  title: GoCMS Admin API
  version: 1.0.0
paths:
  /card-schemas:
    delete:
      consumes:
      - application/json
      description: Deletes a card schema by its ID.
      parameters:
      - description: ID of the card schema to delete
        in: body
        name: schema
        required: true
        schema:
          $ref: '#/definitions/admin_app.DeleteSchemaBinding'
      produces:
      - application/json
      responses:
        "200":
          description: Deleted schema ID
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request or deletion error
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a card schema
      tags:
      - card_schema
    get:
      description: Retrieves a paginated list of card schemas.
      parameters:
      - default: 0
        description: Pagination offset
        in: query
        name: offset
        type: integer
      - default: 0
        description: Pagination limit (0 means no limit)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_app.GetSchemaasResponse'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get list of card schemas
      tags:
      - card_schema
    post:
      consumes:
      - application/json
      description: Creates a new card schema by validating and storing the provided
        JSON schema and title.
      parameters:
      - description: Card schema to add
        in: body
        name: schema
        required: true
        schema:
          $ref: '#/definitions/admin_app.AddCardSchemaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_app.CardIdResponse'
        "400":
          description: Invalid request body or schema
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add a new card schema
      tags:
      - card_schema
  /card-schemas/{id}:
    get:
      description: Retrieves a card schema by its UUID.
      parameters:
      - description: Card schema UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.CardSchema'
        "400":
          description: Invalid schema ID
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "404":
          description: Schema not found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a card schema by UUID
      tags:
      - card_schema
  /cards:
    delete:
      description: Deletes a card by its ID.
      parameters:
      - description: Card ID to delete
        in: body
        name: id
        required: true
        schema:
          $ref: '#/definitions/admin_app.DeletePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_app.PostIdResponse'
        "400":
          description: Invalid ID provided
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "404":
          description: Card not found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a card
      tags:
      - cards
    post:
      consumes:
      - application/json
      description: Adds a new post to the database.
      parameters:
      - description: Post to add
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/admin_app.AddCardRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_app.CardIdResponse'
        "400":
          description: Invalid request body or missing data
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add a new post
      tags:
      - cards
    put:
      consumes:
      - application/json
      description: Updates an existing card with new data.
      parameters:
      - description: Card data to update
        in: body
        name: card
        required: true
        schema:
          $ref: '#/definitions/admin_app.ChangeCardRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_app.CardIdResponse'
        "400":
          description: Invalid request body or could not change card
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an existing card
      tags:
      - cards
  /cards/{schema}:
    get:
      description: Retrieves a paginated list of cards by schema UUID.
      parameters:
      - description: schema UUID
        in: path
        name: schema
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_app.GetCardRequest'
        "400":
          description: Invalid post ID
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a card list
      tags:
      - cards
  /images:
    post:
      consumes:
      - multipart/form-data
      description: Uploads an image file, saves it, and creates minified versions.
      parameters:
      - description: The image file to upload
        in: formData
        name: file
        required: true
        type: file
      - description: A brief description of the image
        in: formData
        name: excerpt
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_app.ImageIdResponse'
        "400":
          description: Invalid input, file type, or size
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Server error while saving file
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload a new image
      tags:
      - images
  /images/{name}:
    delete:
      consumes:
      - application/json
      description: Deletes an image file from the server by its filename.
      parameters:
      - description: Image filename to delete
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_app.ImageIdResponse'
        "400":
          description: Invalid or missing filename
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an image
      tags:
      - images
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates user and returns a JWT token.
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Login user
      tags:
      - auth
  /pages:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of pages.
      parameters:
      - default: 0
        description: Pagination offset
        in: query
        name: offset
        type: integer
      - default: 0
        description: Pagination limit (0 means no limit)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of pages
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid offset or limit parameter
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a list of pages
      tags:
      - pages
    post:
      consumes:
      - application/json
      description: Adds a new page to the database.
      parameters:
      - description: Page to add
        in: body
        name: page
        required: true
        schema:
          $ref: '#/definitions/admin_app.AddPageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_app.PageResponse'
        "400":
          description: Invalid request body or data
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add a new page
      tags:
      - pages
    put:
      consumes:
      - application/json
      description: Updates an existing page with new data.
      parameters:
      - description: Page data to update
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/admin_app.ChangePageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_app.PostIdResponse'
        "400":
          description: Invalid request body or could not change page
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an existing page
      tags:
      - pages
  /pages/{link}:
    delete:
      description: Deletes a page by its Link.
      parameters:
      - description: Page Link
        in: path
        name: link
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_app.DeletePageRequest'
        "400":
          description: Invalid link provided
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "404":
          description: Page not found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a page
      tags:
      - pages
  /permalinks/{permalink}/{post_id}:
    post:
      consumes:
      - application/json
      description: Adds a new permalink to the database.
      parameters:
      - description: Permalink
        in: path
        name: permalink
        required: true
        type: string
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_app.PermalinkIdResponse'
        "400":
          description: Invalid request body or missing data
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add a new permalink
      tags:
      - permalink
  /post:
    post:
      consumes:
      - application/json
      description: Adds a new post to the database.
      parameters:
      - description: Post to add
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/admin_app.AddPostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/admin_app.PostIdResponse'
        "400":
          description: Invalid request body or missing data
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add a new post
      tags:
      - posts
  /posts:
    delete:
      description: Deletes a post by its ID.
      parameters:
      - description: Post ID to delete
        in: body
        name: id
        required: true
        schema:
          $ref: '#/definitions/admin_app.DeletePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_app.PostIdResponse'
        "400":
          description: Invalid ID provided
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a post
      tags:
      - posts
    get:
      description: Retrieves a paginated list of posts.
      parameters:
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      - default: 0
        description: Limit for pagination. 0 means no limit.
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_app.GetPostsResponse'
        "400":
          description: Invalid offset or limit parameter
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a list of posts
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Updates an existing post with new data.
      parameters:
      - description: Post data to update
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/admin_app.ChangePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_app.PostIdResponse'
        "400":
          description: Invalid request body or could not change post
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an existing post
      tags:
      - posts
  /posts/{id}:
    get:
      description: Retrieves a single post by its ID.
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_app.GetPostResponse'
        "400":
          description: Invalid post ID
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a single post
      tags:
      - posts
  /register:
    post:
      consumes:
      - application/json
      description: Adds a new User to the database.
      parameters:
      - description: User to create
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Create new User
      tags:
      - auth
  /user:
    get:
      description: Returns the currently authenticated user based on JWT token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
